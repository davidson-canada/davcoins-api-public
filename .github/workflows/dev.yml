name: CI/CD

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs: 
  Setup:
    name: Setup 
    runs-on: ubuntu-latest
    outputs: 
      staging: ${{ steps.SetEnv.outputs.staging}}

    steps:
      - name: Set env NEED
        run: | 
          if [[ $GITHUB_REF_NAME == 'main' ]]; then 
              echo "STAGING=prod" >> "$GITHUB_ENV"
          else
              echo "STAGING=dev" >> "$GITHUB_ENV"
          fi
      - id: SetEnv
        run: |
          echo "::set-output name=staging::${{ env.STAGING }}"
          echo ${{ github.event_name}} et ${{ github.ref_name}}
  
  Test: 
    name: Test
    runs-on: ubuntu-latest
    needs: Setup
    
    steps: 
      - name: Checkout git 
        uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Build and test project
        run: mvn --quiet test

  Build:
    name: Build
    runs-on: ubuntu-latest
    needs: [Setup,Test]
    if: ${{  (github.ref_name == 'main' || github.ref_name == 'develop') && github.event_name == 'push' }}
    steps:
      - name: Checkout git 
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}
          project_id: ${{ secrets.PROJECT_ID }}
      
      - name: Setup Gcould CLI 
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.PROJECT_ID }}

      - run: |-
          gcloud --quiet auth configure-docker
      - run: |-
          gcloud --quiet components install beta

      - name: Build docker image
        run: |-
          docker build --build-arg type_deploy="${{needs.Setup.outputs.staging}}" -t "${{secrets.DOCKER_REGISTRY}}/${{secrets.PROJECT_ID}}/${{secrets.SERVICE_NAME}}:${{needs.Setup.outputs.staging}}" .

      - name: Push docker image to gcr registry
        run: |-
          docker push "${{secrets.DOCKER_REGISTRY}}/${{secrets.PROJECT_ID}}/${{secrets.SERVICE_NAME}}:${{needs.Setup.outputs.staging}}"
      
  Deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [Setup, Test, Build]
    if: ${{  (github.ref_name == 'main' || github.ref_name == 'develop') && github.event_name == 'push' }}
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}
          project_id: ${{ secrets.PROJECT_ID }}
      
      - name: Setup Gcould CLI 
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.PROJECT_ID }}

      - name: Deploy to Cloud run
        run: |-
          gcloud run deploy "${{secrets.SERVICE_NAME}}" \
            --region "${{secrets.REGION_NAME}}" \
            --image "${{secrets.DOCKER_REGISTRY}}/${{secrets.PROJECT_ID}}/${{secrets.SERVICE_NAME}}:${{needs.Setup.outputs.staging}}" \
            --allow-unauthenticated 
  
  Notification:
    name: Notification to discord
    runs-on: ubuntu-latest
    needs: [Setup, Test, Build, Deploy]
    if: always()
    steps: 
      - uses: sarisia/actions-status-discord@v1
        if: ${{ needs.Setup.result == 'failure' || needs.Test.result == 'failure' || needs.Build.result == 'failure' || needs.Deploy.result == 'failure'}}
        with:
          webhook: ${{ secrets.DISCORD_CICD_WEBHOOK }}
          title: "CI/CD ${{secrets.SERVICE_NAME}}-${{needs.Setup.outputs.staging}}"
          description: "FAILURE - Test: ${{ needs.Test.result}}; Build: ${{ needs.Build.result}}; Deploy: ${{ needs.Deploy.result}}"
          color: "0xff0000"
          username: GitHub Actions

      - uses: sarisia/actions-status-discord@v1
        if: ${{ needs.Setup.result == 'success' && needs.Test.result == 'success' && needs.Build.result == 'success' && needs.Deploy.result == 'success' || needs.Deploy.result == 'skipped'  || needs.Build.result == 'skipped' }}
        with:
          webhook: ${{ secrets.DISCORD_CICD_WEBHOOK }}
          title: "CI/CD ${{secrets.SERVICE_NAME}}-${{needs.Setup.outputs.staging}}"
          description: "SUCCESS - Test: ${{ needs.Test.result}}; Build: ${{ needs.Build.result}}; Deploy: ${{ needs.Deploy.result}}"
          color: "00ff00"
          username: GitHub Actions